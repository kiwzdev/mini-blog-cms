// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String    @default("Anonymous")
  email         String    @unique
  password      String?
  profileImage  String?
  coverImage    String?
  role          String    @default("member")
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]

  posts        Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]
  userLikes    UserLike[] // likes ที่ได้รับ
  givenLikes   UserLike[]    @relation("UserGivenLikes") // likes ที่ให้

  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  contentType String   @default("markdown") // "markdown" หรือ "richtext"
  category    String?
  excerpt     String?
  coverImage  String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    PostLike[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId   String
  post     Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String
  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    CommentLike[]

  @@map("comments")
}

model PostLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  postId String
  userId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

// Like สำหรับ Comment
model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  commentId String
  userId    String

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("comment_likes")
}

// Like สำหรับ User (follow/like user)
model UserLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  likedUserId String // User ที่ถูก like
  userId      String // User ที่ like

  likedUser User @relation(fields: [likedUserId], references: [id], onDelete: Cascade)
  user      User @relation("UserGivenLikes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([likedUserId, userId])
  @@map("user_likes")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
}

model VerificationEmailToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([token])
  @@index([expires])
  @@index([email, expires])
}
